/*
    First order logic parser, for J-Golo specifications.
    Initialy inspired by Fol parser :
        https://github.com/rindPHI/FirstOrderParser
    Official WhyML Parser :
        https://github.com/jpdeplaix/why3/blob/master/src/parser/lexer.mll
        https://github.com/jpdeplaix/why3/blob/master/src/parser/parser.mly
*/

// =====> How to correctly cite the source (original Copyright below)
/* Copyright 2014 Dominic Scheurer
 *
 * This file is part of FirstOrderParser.
 *
 * FirstOrderParser is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * FirstOrderParser is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with FirstOrderParser.  If not, see <http://www.gnu.org/licenses/>.
 */

options
{
	LOOKAHEAD = 1;
	JDK_VERSION = "1.6";
	static = false;
}

PARSER_BEGIN(FolJGoloParser)
package org.eclipse.golo.compiler.jgoloparser;

import java.io.StringReader;
import java.util.ArrayList;

//import org.eclipse.golo.compiler.jgoloparser.*;

/**
 * <p>
 * Parser for formulas of the language of first-order (predicate)
 * logic. The suggested method to start with is {@link #parse(String)}.
 * </p>
 *
 * <p>
 * Original Syntax: Variables start with upper letters, functions and predicates
 * with lower letters. Digits and underscores in identifiers are allowed.
 * The binary operators "&", "|", "->" must be put in parentheses; parentheses
 * in other places are not allowed. The negation operator is "!", the
 * universal quantifier is "forall", the existential quantifier is "exists".
 * Whitespace is ignored.
 * </p>
 *
 * <p>
 *  WhyML changes :
 *   + & -> /\
 *   + | -> \/
 * </p>
 *
 * <p>
 * <pre>
 * term  ::= var | fun | fun terms
 * terms ::= "(" term ")" | "(" term "," terms ")" !! Problème parentheses inclues dans la récursion
 * form  ::=   pred
 *           | pred terms
 *           | "!" form
 *           | "(" form "/\" form ")"
 *           | "(" form "\/" form ")"
 *           | "(" form "->" form ")"
 *           | "exists " var "." form
 *           | "forall " var "." form
 *
 * spec ::=   ensures "{" form "}"
 *          | requires "{" form "}"
 *          | invariant "{" form "}"
 *          | variant "{" form "}"
 *
 * specs ::= spec | spec specs
 * </pre>


 * Objective grammar :
 * <pre>

 * term   ::= "(" arith ")"
 *           | var
 *           | fun tuple
 *           | litteral value

 * adds   ::=  literals "+" adds
 *           | literals "-" adds
 *           | literals

 * arith  ::=  adds "*" arith
 *           | adds "/" arith
 *           | adds "%" arith
 *           | adds

 * comp   ::=  arith "<"  arith
 *           | arith "<=" arith
 *           | arith ">"  arith
 *           | arith ">=" arith
 *           | arith "="  arith
 *           | arith "<>" arith


 * param  ::=  form | arith
 * tuple  ::=  param *

 * decl   ::=  var ":" type {"," var ":" type }*


 * clause ::=  comp
 *           | var
 *           | pred tuple
 *           | "not" form
 *           | "exists " decl "." "(" form ")"
 *           | "forall " decl "." "(" form ")"


 * form   ::=  clause
 *           | "(" form ")"
 *           | clause "/\"  form
 *           | clause "\/"  form
 *           | clause "->"  form   // !! have to be more prioritized.
 *           | clause "<->" form   // !! have to be more prioritized.

 * spec   ::=  ensures "{" form "}"
 *           | requires "{" form "}"
 *           | invariant "{" form "}"
 *           | variant "{" form "}"
 *
 * specs ::= spec | spec specs
 * </pre>

 * </p>

 DONE : no distinction between variables and fun through first letter capitlisation
 DONE : form is left AND right recurive ...
 DONE : Function are without parenthesis (check the no parameter case)
 TODO : add internal why functions (nth, Some, list, Array ...)
 TODO : add internal why types (int, int32, ...)
 TODO : add arithmetics
 TODO : Param has to return a param (clause or arith) instead of a term.
 TODO : authorize interval (1 < x <12)
 TODO : ...
 *
 * @author Dominic Scheurer
 * @author Nicolas Stouls
 */
public class FolJGoloParser
{
    /**
     * Parses a given formula.
     *
     * @param formula JGFormula to parse.
     * @return Parsed formula object.
     * @throws ParseException if an error occurs during parsing.
     */
    public static JGSpecs parse(String formula) throws ParseException
    {
        FolJGoloParser parser =
        		new FolJGoloParser(new StringReader(formula));
        return parser.parse();
    }
}
PARSER_END(FolJGoloParser)

SKIP :
{
 	" "
|	"\t"
|	"\r"
|	"\n"
|	"\f"
}

/* removed : | < VARIABLE: < UPPER > (< INNER >)* > */
TOKEN :
{
	< OPEN: "(" >
|	< CLOSE: ")" >
|	< COMMA: "," >
|	< DOT: "." >

|	< NEG: "!" >
|	< CONJ: "/\\" >
|	< DISJ: "\\/" >
|	< IMP: "->" >
|	< ALL: "forall" >
|	< EXIST: "exists" >

| < ENSURES: "ensures" >
| < REQUIRES: "requires" >
| < INVARIANT: "invariant" >
| < VARIANT: "variant" >


| < ID: (< LOWER > | <UPPER> | <UNDER> ) (< INNER >)* >

|   < #INNER: (<UPPER> | <UNDER> | <LOWER> | <DIGIT>) >
|   < #DIGIT: ["0" - "9"] >
|   < #LOWER: ["a" - "z"] >
|   < #UPPER: ["A" - "Z"] >
|   < #UNDER: "_"  >

}

JGSpecs parse() :
{
    JGSpecs specs;
}
{
    specs = specs()
    < EOF >
    {
        return specs;
    }
}

JGSpecs specs() :
{
    JGSpecs specs = new JGSpecs();
    JGSpec spec;
}
{
    (
        spec = spec()
        {
          specs.add(spec);
        }
    )+
    {
        return specs;
    }
}


JGSpec spec() :
{
    JGFormula form;
    String specType;
}
{

    specType=specType()
    "{"
    form=formula()
    "}"
    {
        return new JGSpec(specType,form);
    }
}


String specType() :
{
    String specType;
}
{

    < ENSURES >   {return "ensures"; } |
    < REQUIRES >  {return "requires"; } |
    < INVARIANT > {return "invariant"; } |
    < VARIANT >   {return "variant"; }
}





/*
 * form   ::=  "(" form ")"
 *           | clause "->"  form   // !! devrait être plus prioritaire.
 *           | clause "<->" form  // !! devrait être plus prioritaire.
 *           | clause "/\"  form
 *           | clause "\/"  form
 *           | clause
 */

JGFormula formula() :
{
    JGFormula innerA, innerB;
}
{
    < OPEN >
    innerA = formula()
    < CLOSE >
    {
      return innerA;
    }

  | innerA = clause()
	(
	      < IMP >
        innerB = formula()
        {
            return new JGImplicative(innerA, innerB);
        }

      | < DISJ >
        innerB = formula()
        {
            return new JGDisjunctive(innerA, innerB);
        }

      | < CONJ >
        innerB = formula()
        {
            return new JGConjunctive(innerA, innerB);
        }

      |
      {
        return innerA;
      }
	)
}



/*
 * clause ::=  comp
 *           | var
 *           | pred params
 *           | "not" form
 *           | "exists " decl "." "(" form ")"  // Je vais imposer ces parenthèses
 *           | "forall " decl "." "(" form ")"  // Je vais imposer ces parenthèses
 */
JGFormula clause() :
{
    JGFormula form;
}
{
	(
	    form = predicate()   |
	    form = negated()     |
	    form = existential() |
	    form = universal()
	)
	{
		return form;
	}
}










JGExistential existential() :
{
    JGFormula inner;
    JGTerm qfdVar;
}
{
	< EXIST >
	< ID >
	{
	    qfdVar = new JGTerm(token.image);
	}
	< DOT >
	< OPEN >
	inner = formula()
	< CLOSE >
	{
	    return new JGExistential(inner, qfdVar);
	}
}

JGUniversal universal() :
{
    JGFormula inner;
    JGTerm qfdVar;
}
{
	< ALL >
	< ID >
	{
	    qfdVar = new JGTerm(token.image);
	}
	< DOT >
	< OPEN >
	inner = formula()
	< CLOSE >
	{
	    return new JGUniversal(inner, qfdVar);
	}
}

JGNegated negated() :
{
    JGFormula inner;
}
{
	< NEG >
	inner = formula()
	{
	    return new JGNegated(inner);
	}
}

JGAtomic predicate() :
{
    JGPredicate p;
    ArrayList<JGTerm> arguments;
}
{
	< ID >
	{
	    p = new JGPredicate(token.image);
	}
	(
		arguments = tuple()
		{
		    return new JGAtomic(p, arguments);
		}
    |
		{
		    return new JGAtomic(p);
		}
	)
}

JGTerm term() :
{
    String name;
    ArrayList<JGTerm> arguments = null;
}
{
    < ID >
    {
      name = token.image;
    }
    arguments = tuple()
    {
        if(arguments == null) {
            return new JGTerm(name);
        } else {
            return new JGTerm(name, arguments);
        }
    }
}

ArrayList<JGTerm> tuple() :
{
    ArrayList<JGTerm> tuple = new ArrayList<JGTerm>();
    JGTerm t;
}
{
    t = param()
    {
        tuple.add(t);
    }
    (
        t = param()
        {
            tuple.add(t);
        }
    )*
    {
        if(tuple.size()==0) return null;
		    return tuple;
    }

}


JGTerm param() :
{
    JGFormula form;
}
{
    < ID >
    {
        return new JGTerm(token.image);
    }
/*
  | < OPEN >
    form = formula()
    < CLOSE >
    {
        return form;
    }*/
}

